// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.11
// Revision: e477e74e05be2411bb0b218a4637de6905e8cd8c
// Build Date: 2022-02-11T00:05:30Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// BankAll is a Bank of type All.
	BankAll Bank = iota
	// BankTinkoff is a Bank of type Tinkoff.
	BankTinkoff
	// BankSber is a Bank of type Sber.
	BankSber
	// BankVTB is a Bank of type VTB.
	BankVTB
	// BankAlpha is a Bank of type Alpha.
	BankAlpha
	// BankRaiffaizen is a Bank of type Raiffaizen.
	BankRaiffaizen
	// BankGasProm is a Bank of type GasProm.
	BankGasProm
)

const _BankName = "AllTinkoffSberVTBAlphaRaiffaizenGasProm"

var _BankNames = []string{
	_BankName[0:3],
	_BankName[3:10],
	_BankName[10:14],
	_BankName[14:17],
	_BankName[17:22],
	_BankName[22:32],
	_BankName[32:39],
}

// BankNames returns a list of possible string values of Bank.
func BankNames() []string {
	tmp := make([]string, len(_BankNames))
	copy(tmp, _BankNames)
	return tmp
}

var _BankMap = map[Bank]string{
	BankAll:        _BankName[0:3],
	BankTinkoff:    _BankName[3:10],
	BankSber:       _BankName[10:14],
	BankVTB:        _BankName[14:17],
	BankAlpha:      _BankName[17:22],
	BankRaiffaizen: _BankName[22:32],
	BankGasProm:    _BankName[32:39],
}

// String implements the Stringer interface.
func (x Bank) String() string {
	if str, ok := _BankMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Bank(%d)", x)
}

var _BankValue = map[string]Bank{
	_BankName[0:3]:                    BankAll,
	strings.ToLower(_BankName[0:3]):   BankAll,
	_BankName[3:10]:                   BankTinkoff,
	strings.ToLower(_BankName[3:10]):  BankTinkoff,
	_BankName[10:14]:                  BankSber,
	strings.ToLower(_BankName[10:14]): BankSber,
	_BankName[14:17]:                  BankVTB,
	strings.ToLower(_BankName[14:17]): BankVTB,
	_BankName[17:22]:                  BankAlpha,
	strings.ToLower(_BankName[17:22]): BankAlpha,
	_BankName[22:32]:                  BankRaiffaizen,
	strings.ToLower(_BankName[22:32]): BankRaiffaizen,
	_BankName[32:39]:                  BankGasProm,
	strings.ToLower(_BankName[32:39]): BankGasProm,
}

// ParseBank attempts to convert a string to a Bank.
func ParseBank(name string) (Bank, error) {
	if x, ok := _BankValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _BankValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Bank(0), fmt.Errorf("%s is not a valid Bank, try [%s]", name, strings.Join(_BankNames, ", "))
}

func (x Bank) Ptr() *Bank {
	return &x
}

// MarshalText implements the text marshaller method.
func (x Bank) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Bank) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseBank(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
