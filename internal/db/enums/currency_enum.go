// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.11
// Revision: e477e74e05be2411bb0b218a4637de6905e8cd8c
// Build Date: 2022-02-11T00:05:30Z
// Built By: goreleaser

package enums

import (
	"fmt"
	"strings"
)

const (
	// CurrencyAny is a Currency of type Any.
	CurrencyAny Currency = iota
	// CurrencyUSD is a Currency of type USD.
	CurrencyUSD
	// CurrencyRUB is a Currency of type RUB.
	CurrencyRUB
	// CurrencyEUR is a Currency of type EUR.
	CurrencyEUR
)

const _CurrencyName = "AnyUSDRUBEUR"

var _CurrencyNames = []string{
	_CurrencyName[0:3],
	_CurrencyName[3:6],
	_CurrencyName[6:9],
	_CurrencyName[9:12],
}

// CurrencyNames returns a list of possible string values of Currency.
func CurrencyNames() []string {
	tmp := make([]string, len(_CurrencyNames))
	copy(tmp, _CurrencyNames)
	return tmp
}

var _CurrencyMap = map[Currency]string{
	CurrencyAny: _CurrencyName[0:3],
	CurrencyUSD: _CurrencyName[3:6],
	CurrencyRUB: _CurrencyName[6:9],
	CurrencyEUR: _CurrencyName[9:12],
}

// String implements the Stringer interface.
func (x Currency) String() string {
	if str, ok := _CurrencyMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Currency(%d)", x)
}

var _CurrencyValue = map[string]Currency{
	_CurrencyName[0:3]:                   CurrencyAny,
	strings.ToLower(_CurrencyName[0:3]):  CurrencyAny,
	_CurrencyName[3:6]:                   CurrencyUSD,
	strings.ToLower(_CurrencyName[3:6]):  CurrencyUSD,
	_CurrencyName[6:9]:                   CurrencyRUB,
	strings.ToLower(_CurrencyName[6:9]):  CurrencyRUB,
	_CurrencyName[9:12]:                  CurrencyEUR,
	strings.ToLower(_CurrencyName[9:12]): CurrencyEUR,
}

// ParseCurrency attempts to convert a string to a Currency.
func ParseCurrency(name string) (Currency, error) {
	if x, ok := _CurrencyValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _CurrencyValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Currency(0), fmt.Errorf("%s is not a valid Currency, try [%s]", name, strings.Join(_CurrencyNames, ", "))
}

func (x Currency) Ptr() *Currency {
	return &x
}

// MarshalText implements the text marshaller method.
func (x Currency) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Currency) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCurrency(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
